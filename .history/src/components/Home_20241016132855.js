import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useState, useEffect } from "react";
import { ensureConnected } from "@/utils/bluetooth/js/main";
import { replRawMode, replSend } from "@/utils/bluetooth/js/repl";
import { Button } from "antd";
import { useWhisper } from "@chengsokdara/use-whisper";
import { app } from "@/utils/app";
import { execMonocle } from "@/utils/comms";
import { Configuration, OpenAIApi } from "openai";

const inter = Inter({ subsets: ["latin"] });

// Set up the OpenAI API client
const configuration = new Configuration({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_TOKEN,
});
const openai = new OpenAIApi(configuration);

const Home = () => {
  const [connected, setConnected] = useState(false);
  const [isRecording, setIsRecording] = useState(false);

  const { startRecording, stopRecording, transcript } = useWhisper({
    apiKey: process.env.NEXT_PUBLIC_OPENAI_API_TOKEN,
    streaming: true,
    timeSlice: 500,
    whisperConfig: {
      language: "en",
    },
  });

  const response = await openai.chat.completions.create({
    model: "gpt-4o",
    messages: [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": `
        You are CharismaGPT, a powerful conversationalist with incredibly high EQ.
        You are helping an individual decide what to say during their job interview. 
        Given a transcript between an interviewee and the interviewer who may want to hire the interviewee,
        provide a concise response of what the individual should say next.`
          }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": "Are semicolons optional in JavaScript?"
        }
      ]
    }
  ]
});

      const res = response.data.choices[0].text;
      if (!res) return;
      await displayRawRizz(res.trim());
    } catch (error) {
      console.error("Error fetching GPT response", error);
    }
  };

  useEffect(() => {
    // Ensure transcript.text is defined before using it
    if (transcript && transcript.text) {
      window.transcript = transcript.text;
    }
  }, [transcript]);

  return (
    <>
      <Head>
        <title>rizzGPT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${inter.className} ${styles.main}`}>
        <div className="flex w-screen h-screen flex-col items-center justify-center">
          <p className="text-3xl">{connected ? "Connected" : "Disconnected"}</p>
          <p>{transcript?.text || "No transcript available"}</p>
          <Button
            type="primary"
            onClick={async () => {
              try {
                await ensureConnected(logger, relayCallback);
                app.run(execMonocle);
                await displayRawRizz();
              } catch (error) {
                console.error("Error connecting", error);
              }
            }}
          >
            Connect
          </Button>
          <div className="flex items-center mt-5 gap-2">
            <Button onClick={onRecord}>
              {isRecording ? "Stop recording" : "Start recording"}
            </Button>
            <Button onClick={fetchGpt}>Get response</Button>
          </div>
        </div>
      </main>
    </>
  );

  function relayCallback(msg) {
    if (!msg) return;

    if (msg.trim() === "trigger b") {
      fetchGpt();
    }

    if (msg.trim() === "trigger a") {
      onRecord();
    }
  }

  function onRecord() {
    isRecording ? stopRecording() : startRecording();
    setIsRecording(!isRecording);
  }

  function wrapText(inputText) {
    const block = 30;
    let text = [];
    for (let i = 0; i < 6; i++) {
      text.push(
        inputText.substring(block * i, block * (i + 1)).replace("\n", "")
      );
    }

    return text;
  }

  async function displayRizz(rizz) {
    if (!rizz) return;
    const splitText = wrapText(rizz);
    let replCmd = "import display;";

    for (let i = 0; i < splitText.length; i++) {
      replCmd += `display.text("${splitText[i]}", 0, ${i * 50}, 0xffffff);`;
    }

    replCmd += "display.show();";

    console.log("**** replCmd ****", replCmd);

    await replSend(replCmd);
  }

  async function displayRawRizz(rizz) {
    await replRawMode(true);
    await displayRizz(rizz);
  }

  async function logger(msg) {
    if (msg === "Connected") {
      setConnected(true);
    }
  }
};

export default Home;
